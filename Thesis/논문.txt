현재 지하철 최단거리 노선에 대한 정보를 포함한 API는 서울시 교통정보시스템을 제외하면 대부분 유료로 제공되어지고 있다.
본 연구는 기존 서울시 교통정보시스템(TOPIS)에서 제공하는 지하철API에 대하여 많은 결함을 발견하고 시작하였다.
하지만 무료로 제공되는 API가 많은 결함으로 신뢰되지 못한다면 많은 불편함이 따를 것이다.
서울시 교통정보시스템에서 제공하는 지하철API는 크게 세가지의 결함을 가지고 있었다.
첫번쨰 을지로입구역-종각역과 신촌역-이대역 같이 가까운 위치의 두 역을 동일한 역으로 인식하여 API결과를 산출한다.
두번째 성수지선과 같이 하나의 노선이 나누어지는 경우 API결과를 산출하지 못한다. 
세번째 지하철과 버스에 관한 정보를 포함한 API이므로 지하철-지하철 경로에 대하여 결측값이 많다.
위 세가지 경우로 인하여 실질적인 지하철자료를 이용한 데이터 분석 시 잘못된 결과를 가져올 것이라 판단하였다.
따라서 본 연구를 통하여 API가 아닌 R 내부에서 사용가능한 패키지로 제작하고자 하였다.

본 연구는 공공데이터 포털에서 제공하는 "서울시 역코드로 지하철역 위치 조회" 명의 데이터를 이용하였다.
해당 데이터는 수도권 지하철역 695개역에 대하여 전철역코드, 전철역명, 호선, 외부코드, 사이버스테이션, X좌표,
Y좌표, X좌표(WGS) 그리고 Y좌표(WGS)에 대한 정보를 제공한다.
우선적으로 위 데이터를 이용하여 수도권을 중심으로 한 지하철 네트워크를 구축하였다. 
네트워크를 구축하는 과정은 다음과 같다. 첫번째로 각 노선별 순서화된 지하철역의 구조를 얻기위하여 '외부코드'를 이용하였다. 
대부분의 노선이 '외부코드'를 기준으로 정렬되어져 있었으며, 1-9호선, 분당선, 경의중앙선, 신분당선,
우이신설 그리고 공항철도로 이루어진 총 14개의 노선을 구성하였다.
두번째로 앞 단계에서 구성한 총 14개의 노선 중 성수지선과 신정지선과 같이 각 노선에 포함되어져 있는 지선에 해당하는 경우,
새로운 노선으로 고려하였다. 총 7개의 지선과 1개의 순환형을 고려하여 최종적으로 22개의 노선을 구성하였다.
총 7개의 지선은 다음과 같다. 구로-신창(1-P), 금천구청-광명(1-A), 병점-서동탄(1-B), 성수-신설동(2-A), 신도림-까치산(2-B), 강동-마천(5-A) 그리고 가좌-서울(K2) 
그리고 1개의 순환형은 다음과 같다. 응암-구산(6-A)
세번째로 위에서 구성한 22개의 노선에 대하여 노선간의 이동이 가능한 점을 고려하도록 환승가능표시를 하였다. 노선간의 이동에 대한 기록을 통하여 각 노선으로 구성된 네트워크 간 이동이 가능하다.
한개의 노선에 경우만 환승이 가능하다면 단순히 그 환승가능한 노선을 기입하여 네트워크를 구축하면 된다. 하지만 수도권 지하철의 경우 2개 노선이상 환승가능한 역이 다수이다.
이를 고려하기위하여 2개이상의 노선이 환승이 가능한 경우 '|' 기호를 이용하여 구분하였다. 예를 들어 4호선 동대문역사문화공원의 경우 환승가능한 역은 '2|5'이다.
이렇게 총 695개의 역 중 수도권을 중심으로 선택한 14개의 노선에 대하여 고려한 총 566개의 지하철역에 한하여 네트워크를 구축하였다. 
566개의 지하철 역은 하나의 지하철 역이 노선에 따라 다르게 입력이 되있으며 유일한 지하철 역은 총 467개이다.
앞 단계에서 구축한 지하철 네트워크는 'subway_data'로 정의한다.

본 연구는 지하철 최단경로에 대한 연구이므로 기준이 되는 출발지에서 도착지까지의 시간이 필요하다.
시간에 대한 정보를 얻기위하여 distHaversine 공식을 이용하여 지하철 역간 거리를 먼저 계산하였다.
distHaversine은 지구가 둥글다는 가정하에서 두 위경도 사이의 최단거리를 계산하는 수식이다. 이를 이용하여 'subway_data' 내 거리에 대한 정보를 구하였다.
<수식 하버사인>
이후 "지하철의 평균표정속도는 34km이다. 정은혜. 서울 지하철...“1호선이 가장 느리다.” https://www.insight.co.kr/newsRead.php?ArtNo=54171" 기사를 이용하여
정차시간을 포함한 34km의 평균표정속도 정보를 통해 지하철은 평균적으로 분당 566m를 이동한다는 것을 알았다. 이를 이용하여 거리에 대한 정보를 이용하여 시간에 대한 정보를 구하였다.
다음으로 'subway_data' 내 환승이 가능한 역만을 모아 분리된 네트워크를 새로 구축하였다. 이는 총 81개 역이 포함되어져 있으며 'transfer_station'으로 정의한다.
지하철을 이용할 때 있어서 환승을 하게되면 자연스럽게 환승에 소비되는 시간을 신경쓰게 될 것이다.
따라서 환승 노선간 거리에 대한 시간정보와 환승 후 지하철을 기다리는 대기시간을 추가적으로 고려하였다.
우선 환승 노선간 거리에 대하여는 서울교통공사에서 제공하는 환승역, 환승거리 및 소요시간 정보를 이용하였다. 하지만 본 데이터에는 총 서울메트로에서 제공하는 총 64개의 환승경우에 대한 정보만 포함되어져 있었다.
따라서 "이세중. 환승 소요시간이 평균 2분 21초임을 고려해...http://news.kbs.co.kr/news/view.do?ncd=3501669" 다음의 기사를 참고하여 제공되지 않는 경우에 대하여는 2분21초의 시간정보를 입력하였다.
그리고 환승 이후 지하철을 대기하는 시간 즉 지하철 대기시간을 추가로 기입하여야 한다. 이 경우는 환승을 하는 경우에 해당하며 예상시간으로 2분을 기입하였다.
최종적으로 최단경로에 결과값 중 시간값의 경우는 한번의 환승이 필요한 경우에 대하여 출발역에서 환승역까지의 시간, 환승소요시간, 환승 후 대기시간 그리고 환승역부터 도착역까지의 시간이 모두 포함된 결과이다. 

지하철 최단경로를 구축하는 과정에서 본 연구에서는 모든 가능한 경우를 산출하고 시간을 비교하는 방식이 아닌 다음의 방식을 제시하였다.
첫째로 출발역과 도착역을 기준으로 공간을 선정한다.
위에서 정의한 'subway_data' 내에는 지하철 역에 대한 위경도 정보가 포함되어 있다.
이를 이용하여 출발역과 도착역이 주어지면 두 지하철역의 위경도를 기준으로 공간을 할애하는 것이다. 하지만 지하철 이용 시 사용자가 환승역을 이용하기 위하여 우회하는 경로의 경우가 있다.
이를 고려하기 위하여 위경도를 기준으로 공간을 약간의 패널티를 포함한 넓은 공간으로 제약하였다.
<그림 위경도 기준 공간제약>
두번째로 선택한 공간 내 환승가능역을 모두 조회한다. 환승가능역 중 출발노선과 도착노선을 모두 포함하는 환승역들에 대하여 후보지로 선택하여 경로를 선정한다.
세번째로 위에서 선택된 모든 후보지들에 대한 시간을 계산한다.
네번째로 모든 후보지들에 대한 시간을 비교하여 최솟값을 가지는 경로를 최단경로로 선정한다.
환승 횟수가 두번 이상인 경우는 공간을 제약하는 방법이 조금 다르다.
첫째로 첫번째 환승 후보지는 출발역과 도착역 사이의 출발노선이 포함된 모든 환승가능한 역이 해당된다.
두번째로 모든 후보지에 대하여 첫번째 환승 후보지와 도착역 사이의 환승지를 두번째 환승 후보지로 정한다.
세번째로 위에서 선택된 모든 후보지들에 대한 시간을 계산한다.
네번째로 모든 후보지들에 대한 시간을 비교하여 최솟값을 가지는 경로를 최단경로로 선정한다.
위 방식을 이용하여 알고리즘을 구성하는 단계에서 효율성을 위하여 환승 횟수는 최대 3번으로 제한하였다.

따라서 출발역과 도착역에 관한 정보를 입력하면 출발노선과 도착노선이 다른 경우에 한하여, 환승이 1번, 2번 그리고 3번의 시간 결과값이 계산되며 이 중 최소시간을 가지는 경로를 최단경로로 선택한다.

다음으로 지하철 최단경로를 구성하는데 필요한 내부함수에 대하여 소개하고자 한다.
첫째로 'get_pahtinfo'는 4개의 argument로 이루어지며 'total', 'start', 'end' 그리고 'line'이 있다.
한 'line'에 해당하는 노선과 총 역수인 'total' 수와 출발역에 해당하는 index를 나타내는 'start', 그리고 도착역에 해당하는 index를 나타내는 'end'를 입력하면 출발역과 도착역에 대한 경로에 해당하는 소요시간과 이동횟수를 산출한다.
여기서 2호선의 순환형 구조를 고려하기 위하여
1> total - |start - end|
2> |start - end|
를 비교하여 선택한다.
또한 6호선의 응암-구산 구간은 한 방향으로만 이동이 가능하다. 이를 고려하기 위하여 역방향의 경로를 원하는 경우 순환형을 고려할 필요가 있기 때문에 'start'가 'end'보다 큰 경우
1> total + end - start
을 계산한다.
기본적으로 'get_pahtinfo'함수는 일반적인 노선에 대하여 |'start'-'end'|의 이동횟수를 계산하고 그에 해당하는 경로의 소요 시간을 계산한다.

두번째로 'get_transfercriteria'는 위경도를 기준으로 공간을 제약한다. 이때 우회하는 경로를 고려하기 위하여 패널티를 포함한 더 넓은 공간으로 한정한다.

세번째로 'get_transferinfo'는 'get_transfercriteria'를 기준으로 제약되어진 공간 안에서 환승지의 후보군을 선택한 후, 'n'이라는 argument로 고려되어지는
환승횟수에 해당하는 모든 경로를 산출한다. 

네번째로 'checkline'은 잘못 선택되는 중간 경로에 대하여 올바른 결과를 산출하는 단계이다. 지선을 고려하기 위하여 선정한 노선의 이름이 '2-A'와 같이 혼합되어 있기 때문에 생기는 오류를 다잡아 주는 함수이다.

지하철 최단경로를 통하여 실제 4월 한달간의 트랜잭션 데이터를 분석하고자 한다.


모든 결과는 깃허브 내 seoulsubway라는 명의 repository에 기록되어져 있으며, R 프로그래밍 내에서 install_github("king4k1/seoulsubway")를 통하여 구현 가능하다.


